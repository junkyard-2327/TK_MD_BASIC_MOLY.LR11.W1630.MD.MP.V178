/*****************************************************************************
*  Copyright Statement:
*  --------------------
*  This software is protected by Copyright and the information contained
*  herein is confidential. The software may not be copied and the information
*  contained herein may not be used or disclosed except with the written
*  permission of MediaTek Inc. (C) 2006
*
*  BY OPENING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
*  THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
*  RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON
*  AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
*  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
*  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
*  NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
*  SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
*  SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK ONLY TO SUCH
*  THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
*  NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S
*  SPECIFICATION OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
*
*  BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE
*  LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
*  AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
*  OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY BUYER TO
*  MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
*
*  THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE
*  WITH THE LAWS OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF
*  LAWS PRINCIPLES.  ANY DISPUTES, CONTROVERSIES OR CLAIMS ARISING THEREOF AND
*  RELATED THERETO SHALL BE SETTLED BY ARBITRATION IN SAN FRANCISCO, CA, UNDER
*  THE RULES OF THE INTERNATIONAL CHAMBER OF COMMERCE (ICC).
*
*****************************************************************************/

/*****************************************************************************
 *
 * Filename:
 * ---------
 *   custom_scatstruct.h
 *
 * Project:
 * --------
 *   Maui_Software
 *
 * Description:
 * ------------
 *   This file declares the scatter file dependent APIs
 *
 * Author:
 * -------
 *   Claudia Lo (mtk01876)     [AUTOGEN_GenVersion]
 *
 *============================================================================
 *             HISTORY
 * Below this line, this part is controlled by PVCS VM. DO NOT MODIFY!!
 *------------------------------------------------------------------------------
 * $Revision$
 * $Modtime$
 * $Log$
 *
 * 06 15 2015 carl.kao
 * [MOLY00121235] [TK6291] [SystemService][Auto-Gen][Request For Design Change] Query TCM base and end address
 * .
 *
 * 04 16 2015 carl.kao
 * [MOLY00106652] [TK6291] [SystemService][Auto-Gen] add a dynamic switchable default cached MCU-RW, HW-RW section
 * add 4 sections for EMI RMPU
 *   1) (MCU RO, MDHW RW)  DNC 
 *   2) (MCU RO, MDHW RW)  NC 
 *   3) (MCU RW, MDHW RW)  DNC 
 *   4) (MCU RW, MDHW RW)  NC
 *
 * 12 23 2014 carl.kao
 * [MOLY00088578] [TK6291] [SystemService] [Auto-Gen] Support L2SRAM section (in L1CORE)
 * aa.
 *
 * 12 22 2014 carl.kao
 * [MOLY00087532] [Denali-1] [SystemService][Auto-Gen] Refactor AutoGen Code and Remove Legacy Code
 * .
 *
 * 11 15 2014 carl.kao
 * [MOLY00083302] [SYSTEM SERVICE][TASK CONFIG] Merge code from MT6291_DEV
 * mcu/l1core
 *
 * 09 11 2014 qmei.yang
 * [MOLY00078623] [SystemService][DebuggingSuite][Internal Refinement][MT6291] Support memory dump
 * .
 *
 * 04 02 2014 carl.kao
 * [MOLY00061134] [SYSTEM SERVICE][AutoGen] AutoGen for MT6291
 * l1core sysgen2
 *
 * 06 25 2013 qmei.yang
 * [MOLY00025806] [SystemService][Auto-Gen][Request For Design Change] Support COPRO
 * support COPRO_arm7's L1Cache
 *
 * 04 26 2013 qmei.yang
 * [MOLY00020542] [SystemService][MOLY] To remove useless input sections by the request
 * support SWLA space as well
 *
 * 10 31 2012 qmei.yang
 * [MOLY00005605] [SystemService][Auto-Gen][Request For Design Change][sysgen2] Create new API: custom_get_DSPTXRX_MaxSize()
 * .
 * 
 * 08 27 2012 qmei.yang
 * [MOLY00001774] [SystemService][Region_Init][Internal Refinement] Support MT6577 region init and remove useless regions and compile option
 * .
 *
 * 05 10 2012 qmei.yang
 * [MAUI_03182425] [Reason]sync codes between modem_dev and 11B
 * .
 *
 * 03 08 2012 qmei.yang
 * [MAUI_03145378] [SystemService][Auto-Gen][Sys Gen][scatGen][Internal Refinement] Phase in AutoGen new flow to support GCC
 * .
 *
 * 02 15 2012 qmei.yang
 * [MAUI_03130553] [SystemService][Auto-Gen][Sys Gen][scatGen][Internal Refinement] Support cmmgen sync with sysgen2
 * Modify custom_query_dump_region() API
 *
 * 01 30 2012 qmei.yang
 * [MAUI_03120516] [SystemService][Auto-Gen][Sys Gen][scatGen][Internal Refinement] Refactory sysgen2.pl
 * 
 *------------------------------------------------------------------------------
 * Upper this line, this part is controlled by PVCS VM. DO NOT MODIFY!!
 *============================================================================
 ****************************************************************************/

#ifndef _CUSTOM_SCATSTRUCT_H
#define _CUSTOM_SCATSTRUCT_H
 
#include "kal_general_types.h"
#include "init.h"

typedef enum
{
	L1CORE_OP_NONE = 0,
	L1CORE_OP_CACHED =1,
} L1CORE_OP_T;


#if defined (__MTK_TARGET__)
    #define __TCMROCODE __attribute__ ((section ("INTSRAM_ROCODE")))
    #define __TCMRODATA __attribute__ ((section ("INTSRAM_RODATA")))
    #define __TCMRW __attribute__ ((section ("INTSRAM_RW")))
    #define __TCMZI __attribute__ ((zero_init, section ("INTSRAM_ZI")))
    #define __PT_Aligned(x) __attribute__ ((section("PAGETABLE"), aligned(x)))
    #define __NONCACHEDZI __attribute__ ((zero_init, section ("NONCACHEDZI")))
#else
    #define __TCMROCODE
    #define __TCMRODATA
    #define __TCMRW
    #define __TCMZI
    #define __PT_Aligned(x)
    #define __NONCACHEDZI
#endif

#ifdef __MTK_TARGET__
extern kal_uint32 custom_query_dump_region(EXTSRAM_REGION_INFO_T* region);

#if defined(__ARM9_MMU__) || defined(__ARM11_MMU__)
#if defined(__ARM9_MMU__)
extern kal_int32 custom_query_fpt_pool(kal_uint32 **pool, kal_uint32 *pool_size);
#endif /* __ARM9_MMU__ */
extern kal_int32 custom_query_cpt_pool(kal_uint32 **pool, kal_uint32 *pool_size);
#endif /* __ARM9_MMU__ || __ARM11_MMU__ */

#if defined(__DYNAMIC_SWITCH_CACHEABILITY__)
extern kal_int32 custom_query_dynamic_cached_extsram_default_nc_region(EXTSRAM_REGION_INFO_T **region);
extern kal_int32 custom_query_dynamic_cached_extsram_default_c_region(EXTSRAM_REGION_INFO_T **region);
extern kal_int32 custom_query_cached_extsram_region(EXTSRAM_REGION_INFO_T **region);
extern kal_int32 custom_query_cached_extsram_code_region(EXTSRAM_REGION_INFO_T **region);
extern kal_int32 custom_query_noncached_extsram_region(EXTSRAM_REGION_INFO_T **region);
extern kal_int32 custom_query_noncached_extsram_ro_region(EXTSRAM_REGION_INFO_T **region);
#endif /* __DYNAMIC_SWITCH_CACHEABILITY__ */



extern kal_uint32 custom_get_1st_ROM_ROMBase(void);
extern kal_uint32 custom_get_1st_ROM_ROMLength(void);
extern kal_uint32 custom_get_1st_ROM_RAMBase(void);
extern kal_uint32 custom_get_1st_ROM_RAMLength(void);
extern kal_uint32 custom_get_1st_ROM_RAMEnd(void);
extern kal_uint32 custom_get_1st_ROM_LoadEnd(void);

extern kal_uint32 custom_get_INTSRAMCODE_Base(void);
extern kal_uint32 custom_get_INTSRAMCODE_End(void);
extern kal_uint32 custom_get_INTSRAMDATA_Base(void);
extern kal_uint32 custom_get_INTSRAMDATA_End(void);
extern kal_uint32 custom_get_INTSRAM_PHYSICAL_BOUNDARY_Base(void);
extern kal_uint32 custom_get_INTSRAM_PHYSICAL_BOUNDARY_MaxSize(void);
extern kal_uint32 custom_get_INTSRAM_Base(void);
extern kal_uint32 custom_get_INTSRAM_End(void);

extern kal_uint32 custom_get_DNC_SharedMem_Base(void);
extern kal_uint32 custom_get_DNC_SharedMem_C_Base(void);
extern kal_uint32 custom_get_DNC_SharedMem_End(void);
extern kal_uint32 custom_get_NC_SharedMem_Base(void);
extern kal_uint32 custom_get_NC_SharedMem_End(void);
extern kal_uint32 custom_get_DNC_MCURO_HWRW_SharedMem_Base(void);
extern kal_uint32 custom_get_DNC_MCURO_HWRW_SharedMem_End(void);
extern kal_uint32 custom_get_NC_MCURO_HWRW_SharedMem_Base(void);
extern kal_uint32 custom_get_NC_MCURO_HWRW_SharedMem_End(void);
extern kal_uint32 custom_get_DNC_MCURW_HWRW_SharedMem_Base(void);
extern kal_uint32 custom_get_DNC_MCURW_HWRW_SharedMem_End(void);
extern kal_uint32 custom_get_NC_MCURW_HWRW_SharedMem_Base(void);
extern kal_uint32 custom_get_NC_MCURW_HWRW_SharedMem_End(void);

extern kal_uint32 custom_get_L2SRAMCODE_Base(void);
extern kal_uint32 custom_get_L2SRAMDATA_Base(void);
extern kal_uint32 custom_get_L2SRAMDATA_End(void);
extern kal_uint32 custom_get_L2SRAM_LENGTH(void);

extern kal_int32 custom_get_DSPTXRX_Base(void);
extern kal_int32 custom_get_DSPTXRX_MaxSize(void);
extern kal_uint32 custom_get_NVRAM_LTABLE_Base(void);
extern kal_uint32 custom_get_NVRAM_LTABLE_Length(void);

extern void custom_get_MaxAvailableMemorySegment(kal_uint32 **Return_begin_addr, kal_uint32 *Return_segment_size);

#if defined(__ARM9_MMU__) || defined(__ARM11_MMU__) || defined(__MTK_MMU__) || defined(__CR4__) || defined(__MTK_MMU_V2__)
extern kal_int32 custom_mk_ram_info(void);
#endif /* __ARM9_MMU__ || __ARM11_MMU__ || __MTK_MMU__ || __CR4__ || __MTK_MMU_V2__ */


#endif /* __MTK_TARGET__ */
#endif /* _CUSTOM_SCATSTRUCT_H */
